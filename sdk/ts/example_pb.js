/* eslint-disable */
/*Proudly generated by GenDocu.com*/
// source: example.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.v1.ExampleMessage1', null, global);
goog.exportSymbol('proto.v1.ExampleMessage2', null, global);
goog.exportSymbol('proto.v1.ExampleMessage2.EnumAllowingAlias', null, global);
goog.exportSymbol('proto.v1.ExampleMessage2.EnumAllowingAlias2', null, global);
goog.exportSymbol('proto.v1.ExampleMessage2.ExampleNested', null, global);
goog.exportSymbol('proto.v1.ExampleMessage2.NestedMessage', null, global);
goog.exportSymbol('proto.v1.ExampleMessage2.NestedMessage.NestedNestedEnum', null, global);
goog.exportSymbol('proto.v1.GlobalEnum1', null, global);
goog.exportSymbol('proto.v1.ReturnType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ExampleMessage1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ExampleMessage1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.ExampleMessage1.displayName = 'proto.v1.ExampleMessage1';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ExampleMessage2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.ExampleMessage2.repeatedFields_, null);
};
goog.inherits(proto.v1.ExampleMessage2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.ExampleMessage2.displayName = 'proto.v1.ExampleMessage2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ExampleMessage2.NestedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ExampleMessage2.NestedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.ExampleMessage2.NestedMessage.displayName = 'proto.v1.ExampleMessage2.NestedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ExampleMessage2.ExampleNested = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ExampleMessage2.ExampleNested, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.ExampleMessage2.ExampleNested.displayName = 'proto.v1.ExampleMessage2.ExampleNested';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ReturnType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ReturnType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.ReturnType.displayName = 'proto.v1.ReturnType';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ExampleMessage1.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ExampleMessage1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ExampleMessage1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ExampleMessage1.toObject = function(includeInstance, msg) {
  var f, obj = {
    mystring: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ExampleMessage1}
 */
proto.v1.ExampleMessage1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ExampleMessage1;
  return proto.v1.ExampleMessage1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ExampleMessage1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ExampleMessage1}
 */
proto.v1.ExampleMessage1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMystring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ExampleMessage1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ExampleMessage1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ExampleMessage1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ExampleMessage1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMystring();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string MyString = 1;
 * @return {string}
 */
proto.v1.ExampleMessage1.prototype.getMystring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.ExampleMessage1} returns this
 */
proto.v1.ExampleMessage1.prototype.setMystring = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.ExampleMessage2.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ExampleMessage2.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ExampleMessage2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ExampleMessage2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ExampleMessage2.toObject = function(includeInstance, msg) {
  var f, obj = {
    myint: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nested: (f = msg.getNested()) && proto.v1.ExampleMessage2.ExampleNested.toObject(includeInstance, f),
    aliased: jspb.Message.getFieldWithDefault(msg, 3, 0),
    aliased2: jspb.Message.getFieldWithDefault(msg, 4, 0),
    globalEnum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    repeatedGlobalEnumList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    optionalGlobalEnum: jspb.Message.getFieldWithDefault(msg, 7, 0),
    nestedMessage: (f = msg.getNestedMessage()) && proto.v1.ExampleMessage2.NestedMessage.toObject(includeInstance, f),
    nestedNestedEnum: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ExampleMessage2}
 */
proto.v1.ExampleMessage2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ExampleMessage2;
  return proto.v1.ExampleMessage2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ExampleMessage2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ExampleMessage2}
 */
proto.v1.ExampleMessage2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMyint(value);
      break;
    case 2:
      var value = new proto.v1.ExampleMessage2.ExampleNested;
      reader.readMessage(value,proto.v1.ExampleMessage2.ExampleNested.deserializeBinaryFromReader);
      msg.setNested(value);
      break;
    case 3:
      var value = /** @type {!proto.v1.ExampleMessage2.EnumAllowingAlias} */ (reader.readEnum());
      msg.setAliased(value);
      break;
    case 4:
      var value = /** @type {!proto.v1.ExampleMessage2.EnumAllowingAlias2} */ (reader.readEnum());
      msg.setAliased2(value);
      break;
    case 5:
      var value = /** @type {!proto.v1.GlobalEnum1} */ (reader.readEnum());
      msg.setGlobalEnum(value);
      break;
    case 6:
      var values = /** @type {!Array<!proto.v1.GlobalEnum1>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRepeatedGlobalEnum(values[i]);
      }
      break;
    case 7:
      var value = /** @type {!proto.v1.GlobalEnum1} */ (reader.readEnum());
      msg.setOptionalGlobalEnum(value);
      break;
    case 8:
      var value = new proto.v1.ExampleMessage2.NestedMessage;
      reader.readMessage(value,proto.v1.ExampleMessage2.NestedMessage.deserializeBinaryFromReader);
      msg.setNestedMessage(value);
      break;
    case 9:
      var value = /** @type {!proto.v1.ExampleMessage2.NestedMessage.NestedNestedEnum} */ (reader.readEnum());
      msg.setNestedNestedEnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ExampleMessage2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ExampleMessage2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ExampleMessage2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ExampleMessage2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyint();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNested();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.ExampleMessage2.ExampleNested.serializeBinaryToWriter
    );
  }
  f = message.getAliased();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAliased2();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getGlobalEnum();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getRepeatedGlobalEnumList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
  f = /** @type {!proto.v1.GlobalEnum1} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getNestedMessage();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.v1.ExampleMessage2.NestedMessage.serializeBinaryToWriter
    );
  }
  f = message.getNestedNestedEnum();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.v1.ExampleMessage2.EnumAllowingAlias = {
  UNKNOWN: 0,
  STARTED: 1,
  RUNNING: 1
};

/**
 * @enum {number}
 */
proto.v1.ExampleMessage2.EnumAllowingAlias2 = {
  UNKNOWN2: 0,
  STARTED2: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ExampleMessage2.NestedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ExampleMessage2.NestedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ExampleMessage2.NestedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ExampleMessage2.NestedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    v: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ExampleMessage2.NestedMessage}
 */
proto.v1.ExampleMessage2.NestedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ExampleMessage2.NestedMessage;
  return proto.v1.ExampleMessage2.NestedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ExampleMessage2.NestedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ExampleMessage2.NestedMessage}
 */
proto.v1.ExampleMessage2.NestedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.v1.ExampleMessage2.NestedMessage.NestedNestedEnum} */ (reader.readEnum());
      msg.setV(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ExampleMessage2.NestedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ExampleMessage2.NestedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ExampleMessage2.NestedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ExampleMessage2.NestedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.v1.ExampleMessage2.NestedMessage.NestedNestedEnum = {
  NESTEDNESTEDVALUE: 0,
  NESTEDNESTEDVALUE1: 1
};

/**
 * optional NestedNestedEnum v = 1;
 * @return {!proto.v1.ExampleMessage2.NestedMessage.NestedNestedEnum}
 */
proto.v1.ExampleMessage2.NestedMessage.prototype.getV = function() {
  return /** @type {!proto.v1.ExampleMessage2.NestedMessage.NestedNestedEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.v1.ExampleMessage2.NestedMessage.NestedNestedEnum} value
 * @return {!proto.v1.ExampleMessage2.NestedMessage} returns this
 */
proto.v1.ExampleMessage2.NestedMessage.prototype.setV = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ExampleMessage2.ExampleNested.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ExampleMessage2.ExampleNested.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ExampleMessage2.ExampleNested} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ExampleMessage2.ExampleNested.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ExampleMessage2.ExampleNested}
 */
proto.v1.ExampleMessage2.ExampleNested.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ExampleMessage2.ExampleNested;
  return proto.v1.ExampleMessage2.ExampleNested.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ExampleMessage2.ExampleNested} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ExampleMessage2.ExampleNested}
 */
proto.v1.ExampleMessage2.ExampleNested.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ExampleMessage2.ExampleNested.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ExampleMessage2.ExampleNested.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ExampleMessage2.ExampleNested} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ExampleMessage2.ExampleNested.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.v1.ExampleMessage2.ExampleNested.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.v1.ExampleMessage2.ExampleNested.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.v1.ExampleMessage2.ExampleNested.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.v1.ExampleMessage2.ExampleNested} returns this
 */
proto.v1.ExampleMessage2.ExampleNested.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 MyInt = 1;
 * @return {number}
 */
proto.v1.ExampleMessage2.prototype.getMyint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.setMyint = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ExampleNested nested = 2;
 * @return {?proto.v1.ExampleMessage2.ExampleNested}
 */
proto.v1.ExampleMessage2.prototype.getNested = function() {
  return /** @type{?proto.v1.ExampleMessage2.ExampleNested} */ (
    jspb.Message.getWrapperField(this, proto.v1.ExampleMessage2.ExampleNested, 2));
};


/**
 * @param {?proto.v1.ExampleMessage2.ExampleNested|undefined} value
 * @return {!proto.v1.ExampleMessage2} returns this
*/
proto.v1.ExampleMessage2.prototype.setNested = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.clearNested = function() {
  return this.setNested(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ExampleMessage2.prototype.hasNested = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EnumAllowingAlias aliased = 3;
 * @return {!proto.v1.ExampleMessage2.EnumAllowingAlias}
 */
proto.v1.ExampleMessage2.prototype.getAliased = function() {
  return /** @type {!proto.v1.ExampleMessage2.EnumAllowingAlias} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.v1.ExampleMessage2.EnumAllowingAlias} value
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.setAliased = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional EnumAllowingAlias2 aliased2 = 4;
 * @return {!proto.v1.ExampleMessage2.EnumAllowingAlias2}
 */
proto.v1.ExampleMessage2.prototype.getAliased2 = function() {
  return /** @type {!proto.v1.ExampleMessage2.EnumAllowingAlias2} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.v1.ExampleMessage2.EnumAllowingAlias2} value
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.setAliased2 = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional GlobalEnum1 global_enum = 5;
 * @return {!proto.v1.GlobalEnum1}
 */
proto.v1.ExampleMessage2.prototype.getGlobalEnum = function() {
  return /** @type {!proto.v1.GlobalEnum1} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.v1.GlobalEnum1} value
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.setGlobalEnum = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated GlobalEnum1 repeated_global_enum = 6;
 * @return {!Array<!proto.v1.GlobalEnum1>}
 */
proto.v1.ExampleMessage2.prototype.getRepeatedGlobalEnumList = function() {
  return /** @type {!Array<!proto.v1.GlobalEnum1>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<!proto.v1.GlobalEnum1>} value
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.setRepeatedGlobalEnumList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.v1.GlobalEnum1} value
 * @param {number=} opt_index
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.addRepeatedGlobalEnum = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.clearRepeatedGlobalEnumList = function() {
  return this.setRepeatedGlobalEnumList([]);
};


/**
 * optional GlobalEnum1 optional_global_enum = 7;
 * @return {!proto.v1.GlobalEnum1}
 */
proto.v1.ExampleMessage2.prototype.getOptionalGlobalEnum = function() {
  return /** @type {!proto.v1.GlobalEnum1} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.v1.GlobalEnum1} value
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.setOptionalGlobalEnum = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.clearOptionalGlobalEnum = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ExampleMessage2.prototype.hasOptionalGlobalEnum = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional NestedMessage nested_message = 8;
 * @return {?proto.v1.ExampleMessage2.NestedMessage}
 */
proto.v1.ExampleMessage2.prototype.getNestedMessage = function() {
  return /** @type{?proto.v1.ExampleMessage2.NestedMessage} */ (
    jspb.Message.getWrapperField(this, proto.v1.ExampleMessage2.NestedMessage, 8));
};


/**
 * @param {?proto.v1.ExampleMessage2.NestedMessage|undefined} value
 * @return {!proto.v1.ExampleMessage2} returns this
*/
proto.v1.ExampleMessage2.prototype.setNestedMessage = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.clearNestedMessage = function() {
  return this.setNestedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ExampleMessage2.prototype.hasNestedMessage = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional NestedMessage.NestedNestedEnum nested_nested_enum = 9;
 * @return {!proto.v1.ExampleMessage2.NestedMessage.NestedNestedEnum}
 */
proto.v1.ExampleMessage2.prototype.getNestedNestedEnum = function() {
  return /** @type {!proto.v1.ExampleMessage2.NestedMessage.NestedNestedEnum} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.v1.ExampleMessage2.NestedMessage.NestedNestedEnum} value
 * @return {!proto.v1.ExampleMessage2} returns this
 */
proto.v1.ExampleMessage2.prototype.setNestedNestedEnum = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ReturnType.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ReturnType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ReturnType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ReturnType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ReturnType}
 */
proto.v1.ReturnType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ReturnType;
  return proto.v1.ReturnType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ReturnType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ReturnType}
 */
proto.v1.ReturnType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ReturnType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ReturnType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ReturnType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ReturnType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.v1.GlobalEnum1 = {
  GLOBALENUMVAL: 0,
  GLOBALENUMVAL1: 1,
  GLOBALENUMVAL11: 1,
  GLOBALENUMVAL12: 1,
  GLOBALENUMVAL2: 2,
  GLOBALENUMVAL3: 3
};

goog.object.extend(exports, proto.v1);
